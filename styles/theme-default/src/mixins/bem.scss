@import 'config';
@import 'bem-func';
@import '../commons/var';
@mixin b($block) {
  $B: $namespace+'-'+$block !global;
  .#{$B} {
    @content;
  }
}

@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: "";
  @each $unit in $element {
    $currentSelector: #{$currentSelector + "." + $B + $element-separator + $unit + ","};
  }
  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  }
  @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: "";
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + & + $modifier-separator + $unit + ","};
  }
  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@mixin meb($modifier: false, $element: $E, $block: $B) {
  $selector: &;
  $modifierCombo: '';
  @if $modifier {
    $modifierCombo: $modifier-separator + $modifier;
  }
  @at-root {
    #{$selector} {
      .#{$block+$element-separator+$element+$modifierCombo} {
        @content;
      }
    }
  }
}

@mixin spec-selector($specSelector, $modifier, $element: false, $block: $B) {
  $modifierCombo: '';
  @if $modifier {
    $modifierCombo: $modifier-separator + $modifier;
  }
  $elementCombo: '';
  @if $element {
    $elementCombo: $element-separator + $element;
  }
  @at-root {
    #{&}#{$specSelector}.#{$block + $elementCombo + $modifierCombo} {
      @content;
    }
  }
}

@mixin not($modifier, $element: false, $block: $B) {
  $elementCombo: '';
  @if $element {
    $elementCombo: $element-separator + $element;
  }
  $currentSelector: "";
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + ':not(.' + $block + $elementCombo + $modifier-separator + $unit + ')'}
  }
  @at-root {
    #{&}#{$currentSelector} {
      @content;
    }
  }
}

@mixin extend-rule($name) {
  @extend #{'%shared-'+$name};
}

@mixin share-rule($name) {
  $rule-name: '%shared-'+$name;
  @at-root #{$rule-name} {
    @content;
  }
}

@mixin pseudo($pseudo) {
  $currentSelector: "";
  @each $unit in $pseudo {
    $currentSelector: #{& + ':' + $pseudo + ','}
  }
  @at-root #{$currentSelector} {
    @content;
  }
}
